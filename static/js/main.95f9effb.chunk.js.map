{"version":3,"sources":["App.js","shuffle.js","serviceWorker.js","index.js"],"names":["Box","posed","div","hidden","opacity","visible","StartBtn","pressable","hoverable","init","scale","press","hover","transition","duration","NextLevelBtn","Item","li","initialShuffleState","id","display","val","App","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isVisibleDots","isVisibleStartBtn","isVisibleShuffle","items","points","totalScore","playing","isVisibleNextLevelBtn","level","onClickStartBtn","bind","assertThisInitialized","onClickShuffledItem","onClickNextLevelBtn","_this2","boxesInterval","setInterval","setState","setTimeout","node","ReactDOM","findDOMNode","querySelector","style","clearInterval","btnQuerySelector","_this3","list","map","item","j","speed","shuffleInterval","array","temporaryValue","currentIndex","length","randomIndex","Math","floor","random","shuffle","prepCards","prevState","console","log","clickedItemId","event","_this4","_this5","react_default","a","createElement","className","pose","onPressEnd","react_pose_es","key","toFixed","Component","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95f9effb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport posed, { PoseGroup } from 'react-pose';\nimport ReactDOM from \"react-dom\";\nimport shuffle from './shuffle';\n\nconst Box = posed.div({\n  hidden: { opacity: 0 },\n  visible: { opacity: 1 }\n});\n\nconst StartBtn = posed.div({\n  pressable: true,\n  hoverable: true,\n  init: { scale: 1 },\n  press: { scale: 0.6 },\n  hover: { scale: 1.2 },\n  hidden: { opacity: 0 , transition: { duration: 1000 } },\n  visible: { opacity: 0.8, transition: { duration: 2000 } }\n});\n\nconst NextLevelBtn = posed.div({\n  pressable: true,\n  hoverable: true,\n  init: { scale: 1 },\n  press: { scale: 0.6 },\n  hover: { scale: 1.2 },\n  hidden: { opacity: 0 , transition: { duration: 1000 } },\n  visible: { \n    opacity: 0.7,\n    transition: { duration: 2000}\n  },\n});\n\n\nconst Item = posed.li({\n  hidden: { opacity: 0 , transition: { duration: 1000 } },\n  visible: { opacity: 0.8, transition: { duration: 5000 } },\n  pressable: true,\n  hoverable: true,\n  init: { scale: 1 },\n  press: { scale: 0.6 },\n  hover: { scale: 1.1 },\n});\n\nconst initialShuffleState = [\n  {id:1,display:\"\",val:\"\"}, {id:2,display:\"\",val:\"\"}, \n  {id:3,display:\"\",val:\"\"}, {id:4,display:\"\",val:\"\"},\n  {id:5,display:\"\",val:\"\"}, {id:6,display:\"\",val:\"\"} \n]\n\nclass App extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state = { \n      isVisibleDots: true, \n      isVisibleStartBtn: false,\n      isVisibleShuffle: false,\n      items: initialShuffleState,\n      points: 6,\n      totalScore: 0,\n      playing: false,\n      isVisibleNextLevelBtn: false,\n      level: 1\n    };\n    this.onClickStartBtn = this.onClickStartBtn.bind(this)\n    this.onClickShuffledItem = this.onClickShuffledItem.bind(this)\n    this.onClickNextLevelBtn = this.onClickNextLevelBtn.bind(this)\n  }\n\n  componentDidMount() {\n    this.boxesInterval = setInterval(() => {\n      this.setState({ isVisibleDots: !this.state.isVisibleDots });\n    }, 500);\n    // ReactDOM.findDOMNode(this).querySelector('.nextLevelBtn').style.display = \"flex\"\n    this.setState({isVisibleNextLevelBtn: true})\n    setTimeout(()=> {\n      const node = ReactDOM.findDOMNode(this);\n      node.querySelector('.boxesContainer').style.display = \"none\"\n      node.querySelector('.startBtn').style.display = \"flex\"\n      clearInterval(this.boxesInterval)\n      this.setState({isVisibleStartBtn: true})\n    }, 3000)\n  }\n\n  prepCards(btnQuerySelector){\n    this.setState(state => {\n      const list = state.items.map((item, j) => {\n          if (j === state.level){\n            item.display = \"x\"\n            item.val = \"x\"\n          }\n          else{\n            item.display = \"\"\n          }\n          return item;\n      });\n      return {\n        list\n      };\n    });\n    let speed = 600;\n    setTimeout(()=> {\n      this.setState(state => {\n        if(state.level === 2){\n          speed = 170;\n          state.points = 12\n        }\n        else if (state.level === 3){\n          speed = 100;\n          state.points = 18\n        }\n        const list = state.items.map((item, j) => {\n            item.display = \"?\"\n            return item;\n        });\n        return {\n          list\n        };\n      });\n    }, 3000)\n\n    setTimeout(()=> {\n      this.shuffleInterval = setInterval(() => {\n        this.setState(state => {\n          const items = shuffle(state.items)\n          state.playing = true\n          return{\n            items\n          }\n        });\n      }, speed);\n    }, 5000)\n\n    setTimeout(()=> {\n      clearInterval(this.shuffleInterval)\n      ReactDOM.findDOMNode(this).querySelector(btnQuerySelector).style.display = \"none\"\n    }, 7000)\n  }\n\n  onClickStartBtn(){\n    this.setState({isVisibleStartBtn:false, isVisibleShuffle:true});\n    ReactDOM.findDOMNode(this).querySelector(\".ul-shuffle\").style.display = \"flex\"\n    const btnQuerySelector = '.startBtn'\n    this.prepCards(btnQuerySelector);\n  }\n\n  onClickNextLevelBtn(){\n    this.setState(prevState => {\n      return {\n        isVisibleNextLevelBtn:false,\n        level: prevState.level + 1\n      }\n    });\n    console.log(this.state.items)\n    ReactDOM.findDOMNode(this).querySelector('.score').style.display = \"none\"\n    const btnQuerySelector = '.nextLevelBtn'\n    this.prepCards(btnQuerySelector);\n  }\n  \n  onClickShuffledItem(clickedItemId, event){\n    this.setState(state => {\n      console.log(\"level: \" + state.level)\n      if (state.playing){\n        const list = state.items.map((item) => {\n            if(item.id === clickedItemId){\n              item.display = item.val\n              if (item.val === \"\"){\n                if (state.points > 1){\n                  if (state.level === 1){\n                    state.points = state.points - 1;\n                  }\n                  else if (state.level === 2){\n                    state.points = state.points - 2;\n                  }\n                  else if (state.level === 3){\n                    state.points = state.points - 3;\n                  }\n                }\n              }\n              else{\n                state.playing = false\n                ReactDOM.findDOMNode(this).querySelector('.score').style.display = \"flex\"\n                state.totalScore = state.totalScore + state.points\n                if(state.level < 3){\n                  ReactDOM.findDOMNode(this).querySelector('.nextLevelBtn').style.display = \"flex\"\n                  state.isVisibleNextLevelBtn = true\n                }\n                else if(state.level === 3){\n                  ReactDOM.findDOMNode(this).querySelector('.score').style.display = \"none\"\n                  ReactDOM.findDOMNode(this).querySelector('.totalScore').style.display = \"flex\"\n                }console.log(state.totalScore + \" :\" + state.points)\n              }\n            }\n            return item;\n        });\n        return {\n          list,\n        };\n      }\n    });\n    \n  }\n\n  render() {\n    const {isVisibleDots} = this.state;\n    const {isVisibleStartBtn} = this.state;\n    const {isVisibleShuffle} = this.state;\n    const {items} = this.state;\n    const {points} = this.state;\n    const {isVisibleNextLevelBtn} = this.state;\n    const {level} = this.state;\n    const {totalScore} = this.state;\n\n\n    return (\n      <div className=\"App\">\n        <div className=\"boxesContainer\">\n          <Box className=\"box\" pose={isVisibleDots ? 'visible' : 'hidden'} />\n          <Box className=\"box\" pose={isVisibleDots ? 'visible' : 'hidden'} />\n          <Box className=\"box\" pose={isVisibleDots ? 'visible' : 'hidden'} />\n        </div>\n        <StartBtn className=\"startBtn\" \n          onPressEnd={this.onClickStartBtn} \n          pose={isVisibleStartBtn ? 'visible' : 'hidden'}> Start \n        </StartBtn>\n        <ul className=\"ul-shuffle\">\n          <PoseGroup pose={isVisibleShuffle ? 'visible' : 'hidden'}>\n          {items.map(item => \n            <Item key={item.id} onPressEnd={this.onClickShuffledItem.bind(this, item.id)}>\n              {item.display}\n            </Item>\n            )\n          }\n          </PoseGroup>\n        </ul>\n        {/* <div className=\"score\">Score: {(points/(6*level) * 100).toFixed(2)}% </div> */}\n        <div className=\"score\">Score: {points}/{6*level} </div>\n        <NextLevelBtn className=\"nextLevelBtn\" \n          onPressEnd={this.onClickNextLevelBtn} \n          pose={isVisibleNextLevelBtn ? 'visible' : 'hidden'}> Next Level \n        </NextLevelBtn>\n        <div className=\"totalScore\">Total Score: {(totalScore/36 * 100).toFixed(2)}% </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default array => {\r\n    let currentIndex = array.length;\r\n    let temporaryValue;\r\n    let randomIndex = 0;\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n  \r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n    return array;\r\n  };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}